name: Small World Propensity

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures tags are fetched

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: pipx install poetry

      - name: Install dependencies
        run: poetry install

      # Semantic Release: Determine and Apply New Version
      # Ensure semantic-release is configured to commit and tag the new version
      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          poetry run semantic-release version
          # Capture the new version number for later steps
          echo "NEW_VERSION=$(poetry version --short)" >> $GITHUB_ENV

      # Commit and Push Version Changes
      - name: Commit and Push Changes
        if: env.NEW_VERSION != ''
        run: |
          git add pyproject.toml small_world_propensity/__init__.py CHANGELOG.md
          git commit -m "chore(release): update to version ${{ env.NEW_VERSION }} [skip ci]"
          git tag v${{ env.NEW_VERSION }}
          git push origin main --tags

      # Clean any existing distribution files
      - name: Clean dist directory
        run: rm -rf dist/*

      # Build the package with the updated version
      - name: Build distribution packages
        run: poetry build

      # Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API }}

      # Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: "Description of the release v${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false